{
    "docs": [
        {
            "location": "/", 
            "text": "siddhi-execution-unitconversion\n\n\nThe \nsiddhi-execution-unitconversion extension\n is an extension to \nSiddhi\n that enables conversions of length, mass, time and volume units.\n\n\nFind some useful links below:\n\n\n\n\nSource code\n\n\nReleases\n\n\nIssue tracker\n\n\n\n\nLatest API Docs\n\n\nLatest API Docs is \n1.0.0-SNAPSHOT\n.\n\n\nHow to use\n\n\nUsing the extension in \nWSO2 Stream Processor\n\n\n\n\n\n\nYou can use this extension in the latest \nWSO2 Stream Processor\n that is a part of \nWSO2 Analytics\n offering, with editor, debugger and simulation support. \n\n\n\n\n\n\nThis extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component \njar\n that can be found in the \nSTREAM_PROCESSOR_HOME\n/lib\n directory.\n\n\n\n\n\n\nUsing the extension as a \njava library\n\n\n\n\nThis extension can be added as a maven dependency along with other Siddhi dependencies to your project.\n\n\n\n\n     \ndependency\n\n        \ngroupId\norg.wso2.extension.siddhi.execution.unitconversion\n/groupId\n\n        \nartifactId\nsiddhi-execution-unitconversion\n/artifactId\n\n        \nversion\nx.x.x\n/version\n\n     \n/dependency\n\n\n\n\n\nJenkins Build Status\n\n\n\n\n\n\n\n\n\n\nBranch\n\n\nBuild Status\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\n\n\n\n\nm3Tol\n \n(\nFunction\n)\nConverts the input cubic meters into liters\n\n\nmlTol\n \n(\nFunction\n)\nConverts the input milliliters into liters\n\n\nlToml\n \n(\nFunction\n)\nConverts the input liters into milliliters\n\n\nlTom3\n \n(\nFunction\n)\nConverts the input liters into cubic meters\n\n\nsTous\n \n(\nFunction\n)\nConverts the input seconds into microseconds\n\n\nhTom\n \n(\nFunction\n)\nConverts the input hours into minutes\n\n\nmTos\n \n(\nFunction\n)\nConverts the input minutes into seconds\n\n\nyTod\n \n(\nFunction\n)\nConverts the input years into days\n\n\nhTos\n \n(\nFunction\n)\nConverts the input hours into seconds\n\n\nsToms\n \n(\nFunction\n)\nConverts the input seconds into milliseconds\n\n\ndToh\n \n(\nFunction\n)\nConverts the input days into hours\n\n\nsTons\n \n(\nFunction\n)\nConverts the input seconds into nanoseconds\n\n\ncmTokm\n \n(\nFunction\n)\nConverts the input centimeters into kilometers\n\n\nkmTocm\n \n(\nFunction\n)\nConverts the input kilometers into centimeters\n\n\ncmTomm\n \n(\nFunction\n)\nConverts the input centimeters into millimeters\n\n\nkmTomi\n \n(\nFunction\n)\nConverts the input kilometers into miles\n\n\ncmToft\n \n(\nFunction\n)\nConverts the input centimeters into feet\n\n\nkmToft\n \n(\nFunction\n)\nConverts the input kilometers into feet\n\n\nmTomm\n \n(\nFunction\n)\nConverts the input meters into millimeters\n\n\ncmTonm\n \n(\nFunction\n)\nConverts the input centimeters into nanometers\n\n\nmTocm\n \n(\nFunction\n)\nConverts the input meters into centimeters\n\n\nMmTokm\n \n(\nFunction\n)\nConverts the input megameters into kilometers\n\n\nkmToin\n \n(\nFunction\n)\nConverts the input kilometers into inches\n\n\ncmToin\n \n(\nFunction\n)\nConverts the input centimeters into inches\n\n\nmiTokm\n \n(\nFunction\n)\nConverts the input miles into kilometers\n\n\ncmToyd\n \n(\nFunction\n)\nConverts the input centimeters into yards\n\n\nkmToum\n \n(\nFunction\n)\nConverts the input kilometers into micrometers\n\n\nkmTonm\n \n(\nFunction\n)\nConverts the input kilometers into nanometers\n\n\nmToyd\n \n(\nFunction\n)\nConverts the input meters into yards\n\n\nmToft\n \n(\nFunction\n)\nConverts the input meters into feet\n\n\nkmTomm\n \n(\nFunction\n)\nConverts the input kilometers into millimeters\n\n\ncmToum\n \n(\nFunction\n)\nConverts the input centimeters into micrometers\n\n\nkmToyd\n \n(\nFunction\n)\nConverts the input kilometers into yards\n\n\ncmTom\n \n(\nFunction\n)\nConverts the input centimeters into meters\n\n\ncmTomi\n \n(\nFunction\n)\nConverts the input centimeters into miles\n\n\nkmTom\n \n(\nFunction\n)\nConverts the input kilometers into meters\n\n\ngTokg\n \n(\nFunction\n)\nConverts the input grams into kilograms\n\n\ngToug\n \n(\nFunction\n)\nConverts the input grams into micrograms\n\n\nkgTost\n \n(\nFunction\n)\nConverts the input kilograms into imperial stones\n\n\ntTog\n \n(\nFunction\n)\nConverts the input Tonnes into grams\n\n\nkgTog\n \n(\nFunction\n)\nConverts the input kilograms into grams\n\n\nkgTooz\n \n(\nFunction\n)\nConverts the input kilograms into ounces\n\n\nkgTot\n \n(\nFunction\n)\nConverts the input kilograms into Tonnes\n\n\ntTokg\n \n(\nFunction\n)\nConverts the input Tonnes into kilograms\n\n\nkgTolb\n \n(\nFunction\n)\nConverts the input kilograms into pounds\n\n\ngTomg\n \n(\nFunction\n)\nConverts the input grams into milligrams\n\n\nkgToLT\n \n(\nFunction\n)\nConverts the input kilograms into imperial tons\n\n\nkgToST\n \n(\nFunction\n)\nConverts the input kilograms into US tons\n\n\n\n\nHow to Contribute\n\n\n\n\n\n\nPlease report issues at \nGitHub Issue Tracker\n.\n\n\n\n\n\n\nSend your contributions as pull requests to \nmaster branch\n. \n\n\n\n\n\n\nContact us\n\n\n\n\n\n\nPost your questions with the \n\"Siddhi\"\n tag in \nStackoverflow\n. \n\n\n\n\n\n\nSiddhi developers can be contacted via the mailing lists:\n\n\nDevelopers List   : \ndev@wso2.org\n\n\nArchitecture List : \narchitecture@wso2.org\n\n\n\n\n\n\nSupport\n\n\n\n\n\n\nWe are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology. \n\n\n\n\n\n\nFor more details and to take advantage of this unique opportunity contact us via \nhttp://wso2.com/support/\n.", 
            "title": "Welcome to WSO2 Siddhi Execution Unitconversion"
        }, 
        {
            "location": "/#siddhi-execution-unitconversion", 
            "text": "The  siddhi-execution-unitconversion extension  is an extension to  Siddhi  that enables conversions of length, mass, time and volume units.  Find some useful links below:   Source code  Releases  Issue tracker", 
            "title": "siddhi-execution-unitconversion"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  1.0.0-SNAPSHOT .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#how-to-use", 
            "text": "Using the extension in  WSO2 Stream Processor    You can use this extension in the latest  WSO2 Stream Processor  that is a part of  WSO2 Analytics  offering, with editor, debugger and simulation support.     This extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component  jar  that can be found in the  STREAM_PROCESSOR_HOME /lib  directory.    Using the extension as a  java library   This extension can be added as a maven dependency along with other Siddhi dependencies to your project.         dependency \n         groupId org.wso2.extension.siddhi.execution.unitconversion /groupId \n         artifactId siddhi-execution-unitconversion /artifactId \n         version x.x.x /version \n      /dependency", 
            "title": "How to use"
        }, 
        {
            "location": "/#jenkins-build-status", 
            "text": "Branch  Build Status      master", 
            "title": "Jenkins Build Status"
        }, 
        {
            "location": "/#features", 
            "text": "m3Tol   ( Function ) Converts the input cubic meters into liters  mlTol   ( Function ) Converts the input milliliters into liters  lToml   ( Function ) Converts the input liters into milliliters  lTom3   ( Function ) Converts the input liters into cubic meters  sTous   ( Function ) Converts the input seconds into microseconds  hTom   ( Function ) Converts the input hours into minutes  mTos   ( Function ) Converts the input minutes into seconds  yTod   ( Function ) Converts the input years into days  hTos   ( Function ) Converts the input hours into seconds  sToms   ( Function ) Converts the input seconds into milliseconds  dToh   ( Function ) Converts the input days into hours  sTons   ( Function ) Converts the input seconds into nanoseconds  cmTokm   ( Function ) Converts the input centimeters into kilometers  kmTocm   ( Function ) Converts the input kilometers into centimeters  cmTomm   ( Function ) Converts the input centimeters into millimeters  kmTomi   ( Function ) Converts the input kilometers into miles  cmToft   ( Function ) Converts the input centimeters into feet  kmToft   ( Function ) Converts the input kilometers into feet  mTomm   ( Function ) Converts the input meters into millimeters  cmTonm   ( Function ) Converts the input centimeters into nanometers  mTocm   ( Function ) Converts the input meters into centimeters  MmTokm   ( Function ) Converts the input megameters into kilometers  kmToin   ( Function ) Converts the input kilometers into inches  cmToin   ( Function ) Converts the input centimeters into inches  miTokm   ( Function ) Converts the input miles into kilometers  cmToyd   ( Function ) Converts the input centimeters into yards  kmToum   ( Function ) Converts the input kilometers into micrometers  kmTonm   ( Function ) Converts the input kilometers into nanometers  mToyd   ( Function ) Converts the input meters into yards  mToft   ( Function ) Converts the input meters into feet  kmTomm   ( Function ) Converts the input kilometers into millimeters  cmToum   ( Function ) Converts the input centimeters into micrometers  kmToyd   ( Function ) Converts the input kilometers into yards  cmTom   ( Function ) Converts the input centimeters into meters  cmTomi   ( Function ) Converts the input centimeters into miles  kmTom   ( Function ) Converts the input kilometers into meters  gTokg   ( Function ) Converts the input grams into kilograms  gToug   ( Function ) Converts the input grams into micrograms  kgTost   ( Function ) Converts the input kilograms into imperial stones  tTog   ( Function ) Converts the input Tonnes into grams  kgTog   ( Function ) Converts the input kilograms into grams  kgTooz   ( Function ) Converts the input kilograms into ounces  kgTot   ( Function ) Converts the input kilograms into Tonnes  tTokg   ( Function ) Converts the input Tonnes into kilograms  kgTolb   ( Function ) Converts the input kilograms into pounds  gTomg   ( Function ) Converts the input grams into milligrams  kgToLT   ( Function ) Converts the input kilograms into imperial tons  kgToST   ( Function ) Converts the input kilograms into US tons", 
            "title": "Features"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Please report issues at  GitHub Issue Tracker .    Send your contributions as pull requests to  master branch .", 
            "title": "How to Contribute"
        }, 
        {
            "location": "/#contact-us", 
            "text": "Post your questions with the  \"Siddhi\"  tag in  Stackoverflow .     Siddhi developers can be contacted via the mailing lists:  Developers List   :  dev@wso2.org  Architecture List :  architecture@wso2.org", 
            "title": "Contact us"
        }, 
        {
            "location": "/#support", 
            "text": "We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.     For more details and to take advantage of this unique opportunity contact us via  http://wso2.com/support/ .", 
            "title": "Support"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/", 
            "text": "API Docs\n\n\nUnitconversion\n\n\nm3Tol \n(\nFunction\n)\n\n\nConverts the input cubic meters into liters\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:m3Tol(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from meters into liters\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForCubicmetreToLitreStream (inValue int); \nfrom UnitConversionForCubicmetreToLitreStream \nselect unitconversion:m3Tol(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe cubic meter values from UnitConversionForCubicmetreToLitreStream will be converted to liters and inserted in to the OutMediationStream\n\n\n\nmlTol \n(\nFunction\n)\n\n\nConverts the input milliliters into liters\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:mlTol(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from milliliters into liters\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForMillilitreToLitreStream (inValue int); \nfrom UnitConversionForMillilitreToLitreStream \nselect unitconversion:mlTol(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe milliliter values from UnitConversionForMillilitreToLitreStream will be converted to liters and inserted in to the OutMediationStream\n\n\n\nlToml \n(\nFunction\n)\n\n\nConverts the input liters into milliliters\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:lToml(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from liters into milliliters\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForLitreToMillilitreStream (inValue int); \nfrom UnitConversionForLitreToMillilitreStream \nselect unitconversion:lToml(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe liter values from UnitConversionForLitreToMillilitreStream will be converted to milliliters and inserted in to the OutMediationStream\n\n\n\nlTom3 \n(\nFunction\n)\n\n\nConverts the input liters into cubic meters\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:lTom3(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from liters into cubic meters\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForLitreToCubicmetreStream (inValue int); \nfrom UnitConversionForLitreToCubicmetreStream \nselect unitconversion:lTom3(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe liter values from UnitConversionForLitreToCubicmetreStream will be converted to cubic meters and inserted in to the OutMediationStream\n\n\n\nsTous \n(\nFunction\n)\n\n\nConverts the input seconds into microseconds\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:sTous(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from seconds into microseconds\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForSecondToMicrosecondStream (inValue int); \nfrom UnitConversionForSecondToMicrosecondStream \nselect unitconversion:sTous(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe second values from UnitConversionForSecondToMicrosecondStream will be converted to microseconds and inserted in to the OutMediationStream\n\n\n\nhTom \n(\nFunction\n)\n\n\nConverts the input hours into minutes\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:hTom(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from hours into minutes\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForHourToMinuteStream (inValue int); \nfrom UnitConversionForHourToMinuteStream \nselect unitconversion:hTom(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe hour values from UnitConversionForHourToMinuteStream will be converted to minutes and inserted in to the OutMediationStream\n\n\n\nmTos \n(\nFunction\n)\n\n\nConverts the input minutes into seconds\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:mTos(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from minutes into seconds\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForMinuteToSecondStream (inValue int); \nfrom UnitConversionForMinuteToSecondStream \nselect unitconversion:mTos(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe minute values from UnitConversionForMinuteToSecondStream will be converted to seconds and inserted in to the OutMediationStream\n\n\n\nyTod \n(\nFunction\n)\n\n\nConverts the input years into days\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:yTod(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from years into days\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForYearToDayStream (inValue int); \nfrom UnitConversionForYearToDayStream \nselect unitconversion:yTod(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe year values from UnitConversionForYearToDayStream will be converted to days and inserted in to the OutMediationStream\n\n\n\nhTos \n(\nFunction\n)\n\n\nConverts the input hours into seconds\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:hTos(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from hours into seconds\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForHourToSecondStream (inValue int); \nfrom UnitConversionForHourToSecondStream \nselect unitconversion:hTos(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe hour values from UnitConversionForHourToSecondStream will be converted to seconds and inserted in to the OutMediationStream\n\n\n\nsToms \n(\nFunction\n)\n\n\nConverts the input seconds into milliseconds\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:sToms(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from seconds into milliseconds\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForSecondToMillisecondStream (inValue int); \nfrom UnitConversionForSecondToMillisecondStream \nselect unitconversion:sToms(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe second values from UnitConversionForSecondToMillisecondStream will be converted to milliseconds and inserted in to the OutMediationStream\n\n\n\ndToh \n(\nFunction\n)\n\n\nConverts the input days into hours\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:dToh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from days into hours\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForDayToHourStream (inValue int); \nfrom UnitConversionForDayToHourStream \nselect unitconversion:dToh(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe day values from UnitConversionForDayToHourStream will be converted to hours and inserted in to the OutMediationStream\n\n\n\nsTons \n(\nFunction\n)\n\n\nConverts the input seconds into nanoseconds\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:sTons(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from seconds into nanoseconds\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForSecondToNanosecondStream (inValue int); \nfrom UnitConversionForSecondToNanosecondStream \nselect unitconversion:sTons(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe second values from UnitConversionForSecondToNanosecondStream will be converted to nanoseconds and inserted in to the OutMediationStream\n\n\n\ncmTokm \n(\nFunction\n)\n\n\nConverts the input centimeters into kilometers\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:cmTokm(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from centimeters into kilometers\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForCentimetreToKilometreStream (inValue int); \nfrom UnitConversionForCentimetreToKilometreStream \nselect unitconversion:cmTokm(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe centimeter values from UnitConversionForCentimetreToKilometreStream will be converted to kilometers and inserted in to the OutMediationStream\n\n\n\nkmTocm \n(\nFunction\n)\n\n\nConverts the input kilometers into centimeters\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:kmTocm(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from kilometers into centimeters\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForKilometreToCentimetreStream (inValue int); \nfrom UnitConversionForKilometreToCentimetreStream \nselect unitconversion:kmTocm(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe kilometer values from UnitConversionForKilometreToCentimetreStream will be converted to centimeters and inserted in to the OutMediationStream\n\n\n\ncmTomm \n(\nFunction\n)\n\n\nConverts the input centimeters into millimeters\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:cmTomm(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from centimeters into millimeters\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForCentimetreToMillimetreStream (inValue int); \nfrom UnitConversionForCentimetreToMillimetreStream \nselect unitconversion:cmTomm(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe centimeter values from UnitConversionForCentimetreToMillimetreStream will be converted to millimeters and inserted in to the OutMediationStream\n\n\n\nkmTomi \n(\nFunction\n)\n\n\nConverts the input kilometers into miles\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:kmTomi(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from kilometers into miles\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForKilometreToMileStream (inValue int); \nfrom UnitConversionForKilometreToMileStream \nselect unitconversion:kmTomi(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe kilometer values from UnitConversionForKilometreToMileStream will be converted to miles and inserted in to the OutMediationStream\n\n\n\ncmToft \n(\nFunction\n)\n\n\nConverts the input centimeters into feet\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:cmToft(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from centimeters to feet\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForCentimetreToFootStream (inValue int); \nfrom UnitConversionForCentimetreToFootStream \nselect unitconversion:cmToft(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe centimeter values from UnitConversionForCentimetreToFootStream will be converted to feet and inserted in to the OutMediationStream\n\n\n\nkmToft \n(\nFunction\n)\n\n\nConverts the input kilometers into feet\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:kmToft(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from kilometers into feet\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForKilometreToFootStream (inValue int); \nfrom UnitConversionForKilometreToFootStream \nselect unitconversion:kmToft(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe kilometer values from UnitConversionForKilometreToFootStream will be converted to feet and inserted in to the OutMediationStream\n\n\n\nmTomm \n(\nFunction\n)\n\n\nConverts the input meters into millimeters\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:mTomm(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from meters into millimeters\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForMetreToMillimetreStream (inValue int); \nfrom UnitConversionForMetreToMillimetreStream \nselect unitconversion:mTomm(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe meter values from UnitConversionForMetreToMillimetreStream will be converted to millimeters and inserted in to the OutMediationStream\n\n\n\ncmTonm \n(\nFunction\n)\n\n\nConverts the input centimeters into nanometers\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:cmTonm(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from centimeters into nanometers\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForCentimetreToNanometreStream (inValue int); \nfrom UnitConversionForCentimetreToNanometreStream \nselect unitconversion:cmTonm(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe centimeter values from UnitConversionForCentimetreToNanometreStream will be converted to nanometers and inserted in to the OutMediationStream\n\n\n\nmTocm \n(\nFunction\n)\n\n\nConverts the input meters into centimeters\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:mTocm(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from meters into centimeters\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForMetreToCentimetreStream (inValue int); \nfrom UnitConversionForMetreToCentimetreStream \nselect unitconversion:mTocm(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe meter values from UnitConversionForMetreToCentimetreStream will be converted to centimeters and inserted in to the OutMediationStream\n\n\n\nMmTokm \n(\nFunction\n)\n\n\nConverts the input megameters into kilometers\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:MmTokm(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from megameters into kilometers\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForMegametreToKilometreStream (inValue int); \nfrom UnitConversionForMegametreToKilometreStream \nselect unitconversion:MmTokm(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe megameters values from UnitConversionForMegametreToKilometreStream will be converted to kilometers and inserted in to the OutMediationStream\n\n\n\nkmToin \n(\nFunction\n)\n\n\nConverts the input kilometers into inches\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:kmToin(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from kilometers into inches\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForKilometreToInchStream (inValue int); \nfrom UnitConversionForKilometreToInchStream \nselect unitconversion:kmToin(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe kilometer values from UnitConversionForKilometreToInchStream will be converted to inches and inserted in to the OutMediationStream\n\n\n\ncmToin \n(\nFunction\n)\n\n\nConverts the input centimeters into inches\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:cmToin(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from centimeters into inches\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForCentimetreToInchStream (inValue int); \nfrom UnitConversionForCentimetreToInchStream \nselect unitconversion:cmToin(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe centimeter values from UnitConversionForCentimetreToInchStream will be converted to inches and inserted in to the OutMediationStream\n\n\n\nmiTokm \n(\nFunction\n)\n\n\nConverts the input miles into kilometers\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:miTokm(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from miles into kilometers\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForMileToKilometreStream (inValue int); \nfrom UnitConversionForMileToKilometreStream \nselect unitconversion:miTokm(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe mile values from UnitConversionForMileToKilometreStream will be converted to kilometers and inserted in to the OutMediationStream\n\n\n\ncmToyd \n(\nFunction\n)\n\n\nConverts the input centimeters into yards\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:cmToyd(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from centimeters into yards\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForCentimetreToYardStream (inValue int); \nfrom UnitConversionForCentimetreToYardStream \nselect unitconversion:cmToyd(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe centimeter values from UnitConversionForCentimetreToYardStream will be converted to yards and inserted in to the OutMediationStream\n\n\n\nkmToum \n(\nFunction\n)\n\n\nConverts the input kilometers into micrometers\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:kmToum(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from kilometers into micrometers\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForKilometreToMicrometreStream (inValue int); \nfrom UnitConversionForKilometreToMicrometreStream \nselect unitconversion:kmToum(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe kilometer values from UnitConversionForKilometreToMicrometreStream will be converted to micrometers and inserted in to the OutMediationStream\n\n\n\nkmTonm \n(\nFunction\n)\n\n\nConverts the input kilometers into nanometers\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:kmTonm(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from kilometers into nanometers\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForKilometreToNanometreStream (inValue int); \nfrom UnitConversionForKilometreToNanometreStream \nselect unitconversion:kmTonm(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe kilometer values from UnitConversionForKilometreToNanometreStream will be converted to nanometers and inserted in to the OutMediationStream\n\n\n\nmToyd \n(\nFunction\n)\n\n\nConverts the input meters into yards\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:mToyd(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from meters into yards\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForMetreToYardStream (inValue int); \nfrom UnitConversionForMetreToYardStream \nselect unitconversion:mToyd(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe meter values from UnitConversionForMetreToYardStream will be converted to yards and inserted in to the OutMediationStream\n\n\n\nmToft \n(\nFunction\n)\n\n\nConverts the input meters into feet\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:mToft(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from meters into feet\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForMetreToFootStream (inValue int); \nfrom UnitConversionForMetreToFootStream \nselect unitconversion:mToft(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe meter values from UnitConversionForMetreToFootStream will be converted to feet and inserted in to the OutMediationStream\n\n\n\nkmTomm \n(\nFunction\n)\n\n\nConverts the input kilometers into millimeters\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:kmTomm(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from kilometers into millimeters\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForKilometreToMillimetreStream (inValue int); \nfrom UnitConversionForKilometreToMillimetreStream \nselect unitconversion:kmTomm(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe kilometer values from UnitConversionForKilometreToMillimetreStream will be converted to millimeters and inserted in to the OutMediationStream\n\n\n\ncmToum \n(\nFunction\n)\n\n\nConverts the input centimeters into micrometers\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:cmToum(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from centimeters into micrometers\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForCentimetreToMicrometreStream (inValue int); \nfrom UnitConversionForCentimetreToMicrometreStream \nselect unitconversion:cmToum(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe centimeter values from UnitConversionForCentimetreToMicrometreStream will be converted to micrometers and inserted in to the OutMediationStream\n\n\n\nkmToyd \n(\nFunction\n)\n\n\nConverts the input kilometers into yards\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:kmToyd(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from kilometers into yards\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForKilometreToYardStream (inValue int); \nfrom UnitConversionForKilometreToYardStream \nselect unitconversion:kmToyd(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe kilometer values from UnitConversionForKilometreToYardStream will be converted to yards and inserted in to the OutMediationStream\n\n\n\ncmTom \n(\nFunction\n)\n\n\nConverts the input centimeters into meters\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:cmTom(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from centimeters into meters\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForCentimetreToMeterStream (inValue int); \nfrom UnitConversionForCentimetreToMeterStream \nselect unitconversion:cmTom(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe centimeter values from UnitConversionForCentimetreToMeterStream will be converted to meters and inserted in to the OutMediationStream\n\n\n\ncmTomi \n(\nFunction\n)\n\n\nConverts the input centimeters into miles\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:cmTomi(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from centimeters into miles\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForCentimetreToMileStream (inValue int); \nfrom UnitConversionForCentimetreToMileStream \nselect unitconversion:cmTomi(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe centimeter values from UnitConversionForCentimetreToMileStream will be converted to miles and inserted in to the OutMediationStream\n\n\n\nkmTom \n(\nFunction\n)\n\n\nConverts the input kilometers into meters\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:kmTom(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from kilometers into meters\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForKilometreToMetreStream (inValue int); \nfrom UnitConversionForKilometreToMetreStream \nselect unitconversion:kmTom(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe kilometer values from UnitConversionForKilometreToMetreStream will be converted to meters and inserted in to the OutMediationStream\n\n\n\ngTokg \n(\nFunction\n)\n\n\nConverts the input grams into kilograms\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:gTokg(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from grams into kilograms\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForGramToKilogramStream (inValue int); \nfrom UnitConversionForGramToKilogramStream \nselect unitconversion:gTokg(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe gram values from UnitConversionForGramToKilogramStream will be converted to kilograms and inserted in to the OutMediationStream\n\n\n\ngToug \n(\nFunction\n)\n\n\nConverts the input grams into micrograms\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:gToug(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from grams into micrograms\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForGramToMicrogramStream (inValue int); \nfrom UnitConversionForGramToMicrogramStream \nselect unitconversion:gToug(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe gram values from UnitConversionForGramToMicrogramStream will be converted to micrograms and inserted in to the OutMediationStream\n\n\n\nkgTost \n(\nFunction\n)\n\n\nConverts the input kilograms into imperial stones\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:kgTost(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from kilograms into imperial stones\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForKilogramToStonemStream (inValue int); \nfrom UnitConversionForKilogramToStonemStream \nselect unitconversion:kgTost(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe kilogram values from UnitConversionForKilogramToStonemStream will be converted to imperial stones and inserted in to the OutMediationStream\n\n\n\ntTog \n(\nFunction\n)\n\n\nConverts the input Tonnes into grams\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:tTog(\nINT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from Tonnes into grams\n\n        \n\n        \nINT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForTonneToGramStream (inValue int); \nfrom UnitConversionForTonneToGramStream \nselect unitconversion:tTog(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe Tonne values from UnitConversionForTonneToGramStream will be converted to grams and inserted in to the OutMediationStream\n\n\n\nkgTog \n(\nFunction\n)\n\n\nConverts the input kilograms into grams\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:kgTog(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from kilograms into grams\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForKilogramToGramStream (inValue int); \nfrom UnitConversionForKilogramToGramStream \nselect unitconversion:kgTog(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe kilogram values from UnitConversionForKilogramToGramStream will be converted to grams and inserted in to the OutMediationStream\n\n\n\nkgTooz \n(\nFunction\n)\n\n\nConverts the input kilograms into ounces\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:kgTooz(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from kilograms into ounces\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForKilogramToOunceStream (inValue int); \nfrom UnitConversionForKilogramToOunceStream \nselect unitconversion:kgTooz(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe kilogram values from UnitConversionForKilogramToOunceStream will be converted to ounces and inserted in to the OutMediationStream\n\n\n\nkgTot \n(\nFunction\n)\n\n\nConverts the input kilograms into Tonnes\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:kgTot(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from kilograms into Tonnes\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForKilogramToTonneStream (inValue int); \nfrom UnitConversionForKilogramToTonneStream \nselect unitconversion:kgTot(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe kilogram values from UnitConversionForKilogramToTonneStream will be converted to Tonnes and inserted in to the OutMediationStream\n\n\n\ntTokg \n(\nFunction\n)\n\n\nConverts the input Tonnes into kilograms\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:tTokg(\nINT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from Tonnes into kilograms\n\n        \n\n        \nINT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForTonneToKilogramStream (inValue int); \nfrom UnitConversionForTonneToKilogramStream \nselect unitconversion:tTokg(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe Tonne values from UnitConversionForTonneToKilogramStream will be converted to kilograms and inserted in to the OutMediationStream\n\n\n\nkgTolb \n(\nFunction\n)\n\n\nConverts the input kilograms into pounds\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:kgTolb(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from kilograms into pounds\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForKilogramToPoundStream (inValue int); \nfrom UnitConversionForKilogramToPoundStream \nselect unitconversion:kgTolb(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe kilogram values from UnitConversionForKilogramToPoundStream will be converted to pounds and inserted in to the OutMediationStream\n\n\n\ngTomg \n(\nFunction\n)\n\n\nConverts the input grams into milligrams\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:gTomg(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from grams into milligrams\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForGramToMilligramStream (inValue int); \nfrom UnitConversionForGramToMilligramStream \nselect unitconversion:gTomg(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe gram values from UnitConversionForGramToMilligramStream will be converted to milligrams and inserted in to the OutMediationStream\n\n\n\nkgToLT \n(\nFunction\n)\n\n\nConverts the input kilograms into imperial tons\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:kgToLT(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from kilograms into imperial tons\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForKilogramToImperialTonStream (inValue int); \nfrom UnitConversionForKilogramToImperialTonStream \nselect unitconversion:kgToLT(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe kilogram values from UnitConversionForKilogramToImperialTonStream will be converted to imperial tons and inserted in to the OutMediationStream\n\n\n\nkgToST \n(\nFunction\n)\n\n\nConverts the input kilograms into US tons\n\n\n\nSyntax\n\n\nDOUBLE\n unitconversion:kgToST(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value needed to be converted from kilograms into US tons\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UnitConversionForKilogramToUSTonStream (inValue int); \nfrom UnitConversionForKilogramToUSTonStream \nselect unitconversion:kgToST(inValue) as UnitConversionValue \ninsert into OutMediationStream;\n\n\n\n\nThe kilogram values from UnitConversionForKilogramToUSTonStream will be converted to US tons and inserted in to the OutMediationStream", 
            "title": "1.0.0-SNAPSHOT"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#api-docs", 
            "text": "", 
            "title": "API Docs"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#unitconversion", 
            "text": "", 
            "title": "Unitconversion"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#m3tol-function", 
            "text": "Converts the input cubic meters into liters  Syntax  DOUBLE  unitconversion:m3Tol( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from meters into liters \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForCubicmetreToLitreStream (inValue int); \nfrom UnitConversionForCubicmetreToLitreStream \nselect unitconversion:m3Tol(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The cubic meter values from UnitConversionForCubicmetreToLitreStream will be converted to liters and inserted in to the OutMediationStream", 
            "title": "m3Tol (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#mltol-function", 
            "text": "Converts the input milliliters into liters  Syntax  DOUBLE  unitconversion:mlTol( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from milliliters into liters \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForMillilitreToLitreStream (inValue int); \nfrom UnitConversionForMillilitreToLitreStream \nselect unitconversion:mlTol(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The milliliter values from UnitConversionForMillilitreToLitreStream will be converted to liters and inserted in to the OutMediationStream", 
            "title": "mlTol (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#ltoml-function", 
            "text": "Converts the input liters into milliliters  Syntax  DOUBLE  unitconversion:lToml( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from liters into milliliters \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForLitreToMillilitreStream (inValue int); \nfrom UnitConversionForLitreToMillilitreStream \nselect unitconversion:lToml(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The liter values from UnitConversionForLitreToMillilitreStream will be converted to milliliters and inserted in to the OutMediationStream", 
            "title": "lToml (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#ltom3-function", 
            "text": "Converts the input liters into cubic meters  Syntax  DOUBLE  unitconversion:lTom3( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from liters into cubic meters \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForLitreToCubicmetreStream (inValue int); \nfrom UnitConversionForLitreToCubicmetreStream \nselect unitconversion:lTom3(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The liter values from UnitConversionForLitreToCubicmetreStream will be converted to cubic meters and inserted in to the OutMediationStream", 
            "title": "lTom3 (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#stous-function", 
            "text": "Converts the input seconds into microseconds  Syntax  DOUBLE  unitconversion:sTous( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from seconds into microseconds \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForSecondToMicrosecondStream (inValue int); \nfrom UnitConversionForSecondToMicrosecondStream \nselect unitconversion:sTous(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The second values from UnitConversionForSecondToMicrosecondStream will be converted to microseconds and inserted in to the OutMediationStream", 
            "title": "sTous (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#htom-function", 
            "text": "Converts the input hours into minutes  Syntax  DOUBLE  unitconversion:hTom( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from hours into minutes \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForHourToMinuteStream (inValue int); \nfrom UnitConversionForHourToMinuteStream \nselect unitconversion:hTom(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The hour values from UnitConversionForHourToMinuteStream will be converted to minutes and inserted in to the OutMediationStream", 
            "title": "hTom (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#mtos-function", 
            "text": "Converts the input minutes into seconds  Syntax  DOUBLE  unitconversion:mTos( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from minutes into seconds \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForMinuteToSecondStream (inValue int); \nfrom UnitConversionForMinuteToSecondStream \nselect unitconversion:mTos(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The minute values from UnitConversionForMinuteToSecondStream will be converted to seconds and inserted in to the OutMediationStream", 
            "title": "mTos (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#ytod-function", 
            "text": "Converts the input years into days  Syntax  DOUBLE  unitconversion:yTod( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from years into days \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForYearToDayStream (inValue int); \nfrom UnitConversionForYearToDayStream \nselect unitconversion:yTod(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The year values from UnitConversionForYearToDayStream will be converted to days and inserted in to the OutMediationStream", 
            "title": "yTod (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#htos-function", 
            "text": "Converts the input hours into seconds  Syntax  DOUBLE  unitconversion:hTos( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from hours into seconds \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForHourToSecondStream (inValue int); \nfrom UnitConversionForHourToSecondStream \nselect unitconversion:hTos(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The hour values from UnitConversionForHourToSecondStream will be converted to seconds and inserted in to the OutMediationStream", 
            "title": "hTos (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#stoms-function", 
            "text": "Converts the input seconds into milliseconds  Syntax  DOUBLE  unitconversion:sToms( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from seconds into milliseconds \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForSecondToMillisecondStream (inValue int); \nfrom UnitConversionForSecondToMillisecondStream \nselect unitconversion:sToms(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The second values from UnitConversionForSecondToMillisecondStream will be converted to milliseconds and inserted in to the OutMediationStream", 
            "title": "sToms (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#dtoh-function", 
            "text": "Converts the input days into hours  Syntax  DOUBLE  unitconversion:dToh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from days into hours \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForDayToHourStream (inValue int); \nfrom UnitConversionForDayToHourStream \nselect unitconversion:dToh(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The day values from UnitConversionForDayToHourStream will be converted to hours and inserted in to the OutMediationStream", 
            "title": "dToh (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#stons-function", 
            "text": "Converts the input seconds into nanoseconds  Syntax  DOUBLE  unitconversion:sTons( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from seconds into nanoseconds \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForSecondToNanosecondStream (inValue int); \nfrom UnitConversionForSecondToNanosecondStream \nselect unitconversion:sTons(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The second values from UnitConversionForSecondToNanosecondStream will be converted to nanoseconds and inserted in to the OutMediationStream", 
            "title": "sTons (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#cmtokm-function", 
            "text": "Converts the input centimeters into kilometers  Syntax  DOUBLE  unitconversion:cmTokm( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from centimeters into kilometers \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForCentimetreToKilometreStream (inValue int); \nfrom UnitConversionForCentimetreToKilometreStream \nselect unitconversion:cmTokm(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The centimeter values from UnitConversionForCentimetreToKilometreStream will be converted to kilometers and inserted in to the OutMediationStream", 
            "title": "cmTokm (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#kmtocm-function", 
            "text": "Converts the input kilometers into centimeters  Syntax  DOUBLE  unitconversion:kmTocm( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from kilometers into centimeters \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForKilometreToCentimetreStream (inValue int); \nfrom UnitConversionForKilometreToCentimetreStream \nselect unitconversion:kmTocm(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The kilometer values from UnitConversionForKilometreToCentimetreStream will be converted to centimeters and inserted in to the OutMediationStream", 
            "title": "kmTocm (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#cmtomm-function", 
            "text": "Converts the input centimeters into millimeters  Syntax  DOUBLE  unitconversion:cmTomm( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from centimeters into millimeters \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForCentimetreToMillimetreStream (inValue int); \nfrom UnitConversionForCentimetreToMillimetreStream \nselect unitconversion:cmTomm(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The centimeter values from UnitConversionForCentimetreToMillimetreStream will be converted to millimeters and inserted in to the OutMediationStream", 
            "title": "cmTomm (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#kmtomi-function", 
            "text": "Converts the input kilometers into miles  Syntax  DOUBLE  unitconversion:kmTomi( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from kilometers into miles \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForKilometreToMileStream (inValue int); \nfrom UnitConversionForKilometreToMileStream \nselect unitconversion:kmTomi(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The kilometer values from UnitConversionForKilometreToMileStream will be converted to miles and inserted in to the OutMediationStream", 
            "title": "kmTomi (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#cmtoft-function", 
            "text": "Converts the input centimeters into feet  Syntax  DOUBLE  unitconversion:cmToft( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from centimeters to feet \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForCentimetreToFootStream (inValue int); \nfrom UnitConversionForCentimetreToFootStream \nselect unitconversion:cmToft(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The centimeter values from UnitConversionForCentimetreToFootStream will be converted to feet and inserted in to the OutMediationStream", 
            "title": "cmToft (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#kmtoft-function", 
            "text": "Converts the input kilometers into feet  Syntax  DOUBLE  unitconversion:kmToft( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from kilometers into feet \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForKilometreToFootStream (inValue int); \nfrom UnitConversionForKilometreToFootStream \nselect unitconversion:kmToft(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The kilometer values from UnitConversionForKilometreToFootStream will be converted to feet and inserted in to the OutMediationStream", 
            "title": "kmToft (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#mtomm-function", 
            "text": "Converts the input meters into millimeters  Syntax  DOUBLE  unitconversion:mTomm( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from meters into millimeters \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForMetreToMillimetreStream (inValue int); \nfrom UnitConversionForMetreToMillimetreStream \nselect unitconversion:mTomm(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The meter values from UnitConversionForMetreToMillimetreStream will be converted to millimeters and inserted in to the OutMediationStream", 
            "title": "mTomm (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#cmtonm-function", 
            "text": "Converts the input centimeters into nanometers  Syntax  DOUBLE  unitconversion:cmTonm( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from centimeters into nanometers \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForCentimetreToNanometreStream (inValue int); \nfrom UnitConversionForCentimetreToNanometreStream \nselect unitconversion:cmTonm(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The centimeter values from UnitConversionForCentimetreToNanometreStream will be converted to nanometers and inserted in to the OutMediationStream", 
            "title": "cmTonm (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#mtocm-function", 
            "text": "Converts the input meters into centimeters  Syntax  DOUBLE  unitconversion:mTocm( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from meters into centimeters \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForMetreToCentimetreStream (inValue int); \nfrom UnitConversionForMetreToCentimetreStream \nselect unitconversion:mTocm(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The meter values from UnitConversionForMetreToCentimetreStream will be converted to centimeters and inserted in to the OutMediationStream", 
            "title": "mTocm (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#mmtokm-function", 
            "text": "Converts the input megameters into kilometers  Syntax  DOUBLE  unitconversion:MmTokm( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from megameters into kilometers \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForMegametreToKilometreStream (inValue int); \nfrom UnitConversionForMegametreToKilometreStream \nselect unitconversion:MmTokm(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The megameters values from UnitConversionForMegametreToKilometreStream will be converted to kilometers and inserted in to the OutMediationStream", 
            "title": "MmTokm (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#kmtoin-function", 
            "text": "Converts the input kilometers into inches  Syntax  DOUBLE  unitconversion:kmToin( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from kilometers into inches \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForKilometreToInchStream (inValue int); \nfrom UnitConversionForKilometreToInchStream \nselect unitconversion:kmToin(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The kilometer values from UnitConversionForKilometreToInchStream will be converted to inches and inserted in to the OutMediationStream", 
            "title": "kmToin (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#cmtoin-function", 
            "text": "Converts the input centimeters into inches  Syntax  DOUBLE  unitconversion:cmToin( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from centimeters into inches \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForCentimetreToInchStream (inValue int); \nfrom UnitConversionForCentimetreToInchStream \nselect unitconversion:cmToin(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The centimeter values from UnitConversionForCentimetreToInchStream will be converted to inches and inserted in to the OutMediationStream", 
            "title": "cmToin (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#mitokm-function", 
            "text": "Converts the input miles into kilometers  Syntax  DOUBLE  unitconversion:miTokm( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from miles into kilometers \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForMileToKilometreStream (inValue int); \nfrom UnitConversionForMileToKilometreStream \nselect unitconversion:miTokm(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The mile values from UnitConversionForMileToKilometreStream will be converted to kilometers and inserted in to the OutMediationStream", 
            "title": "miTokm (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#cmtoyd-function", 
            "text": "Converts the input centimeters into yards  Syntax  DOUBLE  unitconversion:cmToyd( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from centimeters into yards \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForCentimetreToYardStream (inValue int); \nfrom UnitConversionForCentimetreToYardStream \nselect unitconversion:cmToyd(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The centimeter values from UnitConversionForCentimetreToYardStream will be converted to yards and inserted in to the OutMediationStream", 
            "title": "cmToyd (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#kmtoum-function", 
            "text": "Converts the input kilometers into micrometers  Syntax  DOUBLE  unitconversion:kmToum( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from kilometers into micrometers \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForKilometreToMicrometreStream (inValue int); \nfrom UnitConversionForKilometreToMicrometreStream \nselect unitconversion:kmToum(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The kilometer values from UnitConversionForKilometreToMicrometreStream will be converted to micrometers and inserted in to the OutMediationStream", 
            "title": "kmToum (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#kmtonm-function", 
            "text": "Converts the input kilometers into nanometers  Syntax  DOUBLE  unitconversion:kmTonm( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from kilometers into nanometers \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForKilometreToNanometreStream (inValue int); \nfrom UnitConversionForKilometreToNanometreStream \nselect unitconversion:kmTonm(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The kilometer values from UnitConversionForKilometreToNanometreStream will be converted to nanometers and inserted in to the OutMediationStream", 
            "title": "kmTonm (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#mtoyd-function", 
            "text": "Converts the input meters into yards  Syntax  DOUBLE  unitconversion:mToyd( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from meters into yards \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForMetreToYardStream (inValue int); \nfrom UnitConversionForMetreToYardStream \nselect unitconversion:mToyd(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The meter values from UnitConversionForMetreToYardStream will be converted to yards and inserted in to the OutMediationStream", 
            "title": "mToyd (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#mtoft-function", 
            "text": "Converts the input meters into feet  Syntax  DOUBLE  unitconversion:mToft( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from meters into feet \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForMetreToFootStream (inValue int); \nfrom UnitConversionForMetreToFootStream \nselect unitconversion:mToft(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The meter values from UnitConversionForMetreToFootStream will be converted to feet and inserted in to the OutMediationStream", 
            "title": "mToft (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#kmtomm-function", 
            "text": "Converts the input kilometers into millimeters  Syntax  DOUBLE  unitconversion:kmTomm( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from kilometers into millimeters \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForKilometreToMillimetreStream (inValue int); \nfrom UnitConversionForKilometreToMillimetreStream \nselect unitconversion:kmTomm(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The kilometer values from UnitConversionForKilometreToMillimetreStream will be converted to millimeters and inserted in to the OutMediationStream", 
            "title": "kmTomm (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#cmtoum-function", 
            "text": "Converts the input centimeters into micrometers  Syntax  DOUBLE  unitconversion:cmToum( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from centimeters into micrometers \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForCentimetreToMicrometreStream (inValue int); \nfrom UnitConversionForCentimetreToMicrometreStream \nselect unitconversion:cmToum(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The centimeter values from UnitConversionForCentimetreToMicrometreStream will be converted to micrometers and inserted in to the OutMediationStream", 
            "title": "cmToum (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#kmtoyd-function", 
            "text": "Converts the input kilometers into yards  Syntax  DOUBLE  unitconversion:kmToyd( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from kilometers into yards \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForKilometreToYardStream (inValue int); \nfrom UnitConversionForKilometreToYardStream \nselect unitconversion:kmToyd(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The kilometer values from UnitConversionForKilometreToYardStream will be converted to yards and inserted in to the OutMediationStream", 
            "title": "kmToyd (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#cmtom-function", 
            "text": "Converts the input centimeters into meters  Syntax  DOUBLE  unitconversion:cmTom( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from centimeters into meters \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForCentimetreToMeterStream (inValue int); \nfrom UnitConversionForCentimetreToMeterStream \nselect unitconversion:cmTom(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The centimeter values from UnitConversionForCentimetreToMeterStream will be converted to meters and inserted in to the OutMediationStream", 
            "title": "cmTom (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#cmtomi-function", 
            "text": "Converts the input centimeters into miles  Syntax  DOUBLE  unitconversion:cmTomi( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from centimeters into miles \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForCentimetreToMileStream (inValue int); \nfrom UnitConversionForCentimetreToMileStream \nselect unitconversion:cmTomi(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The centimeter values from UnitConversionForCentimetreToMileStream will be converted to miles and inserted in to the OutMediationStream", 
            "title": "cmTomi (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#kmtom-function", 
            "text": "Converts the input kilometers into meters  Syntax  DOUBLE  unitconversion:kmTom( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from kilometers into meters \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForKilometreToMetreStream (inValue int); \nfrom UnitConversionForKilometreToMetreStream \nselect unitconversion:kmTom(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The kilometer values from UnitConversionForKilometreToMetreStream will be converted to meters and inserted in to the OutMediationStream", 
            "title": "kmTom (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#gtokg-function", 
            "text": "Converts the input grams into kilograms  Syntax  DOUBLE  unitconversion:gTokg( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from grams into kilograms \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForGramToKilogramStream (inValue int); \nfrom UnitConversionForGramToKilogramStream \nselect unitconversion:gTokg(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The gram values from UnitConversionForGramToKilogramStream will be converted to kilograms and inserted in to the OutMediationStream", 
            "title": "gTokg (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#gtoug-function", 
            "text": "Converts the input grams into micrograms  Syntax  DOUBLE  unitconversion:gToug( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from grams into micrograms \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForGramToMicrogramStream (inValue int); \nfrom UnitConversionForGramToMicrogramStream \nselect unitconversion:gToug(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The gram values from UnitConversionForGramToMicrogramStream will be converted to micrograms and inserted in to the OutMediationStream", 
            "title": "gToug (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#kgtost-function", 
            "text": "Converts the input kilograms into imperial stones  Syntax  DOUBLE  unitconversion:kgTost( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from kilograms into imperial stones \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForKilogramToStonemStream (inValue int); \nfrom UnitConversionForKilogramToStonemStream \nselect unitconversion:kgTost(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The kilogram values from UnitConversionForKilogramToStonemStream will be converted to imperial stones and inserted in to the OutMediationStream", 
            "title": "kgTost (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#ttog-function", 
            "text": "Converts the input Tonnes into grams  Syntax  DOUBLE  unitconversion:tTog( INT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from Tonnes into grams \n         \n         INT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForTonneToGramStream (inValue int); \nfrom UnitConversionForTonneToGramStream \nselect unitconversion:tTog(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The Tonne values from UnitConversionForTonneToGramStream will be converted to grams and inserted in to the OutMediationStream", 
            "title": "tTog (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#kgtog-function", 
            "text": "Converts the input kilograms into grams  Syntax  DOUBLE  unitconversion:kgTog( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from kilograms into grams \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForKilogramToGramStream (inValue int); \nfrom UnitConversionForKilogramToGramStream \nselect unitconversion:kgTog(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The kilogram values from UnitConversionForKilogramToGramStream will be converted to grams and inserted in to the OutMediationStream", 
            "title": "kgTog (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#kgtooz-function", 
            "text": "Converts the input kilograms into ounces  Syntax  DOUBLE  unitconversion:kgTooz( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from kilograms into ounces \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForKilogramToOunceStream (inValue int); \nfrom UnitConversionForKilogramToOunceStream \nselect unitconversion:kgTooz(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The kilogram values from UnitConversionForKilogramToOunceStream will be converted to ounces and inserted in to the OutMediationStream", 
            "title": "kgTooz (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#kgtot-function", 
            "text": "Converts the input kilograms into Tonnes  Syntax  DOUBLE  unitconversion:kgTot( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from kilograms into Tonnes \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForKilogramToTonneStream (inValue int); \nfrom UnitConversionForKilogramToTonneStream \nselect unitconversion:kgTot(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The kilogram values from UnitConversionForKilogramToTonneStream will be converted to Tonnes and inserted in to the OutMediationStream", 
            "title": "kgTot (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#ttokg-function", 
            "text": "Converts the input Tonnes into kilograms  Syntax  DOUBLE  unitconversion:tTokg( INT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from Tonnes into kilograms \n         \n         INT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForTonneToKilogramStream (inValue int); \nfrom UnitConversionForTonneToKilogramStream \nselect unitconversion:tTokg(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The Tonne values from UnitConversionForTonneToKilogramStream will be converted to kilograms and inserted in to the OutMediationStream", 
            "title": "tTokg (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#kgtolb-function", 
            "text": "Converts the input kilograms into pounds  Syntax  DOUBLE  unitconversion:kgTolb( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from kilograms into pounds \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForKilogramToPoundStream (inValue int); \nfrom UnitConversionForKilogramToPoundStream \nselect unitconversion:kgTolb(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The kilogram values from UnitConversionForKilogramToPoundStream will be converted to pounds and inserted in to the OutMediationStream", 
            "title": "kgTolb (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#gtomg-function", 
            "text": "Converts the input grams into milligrams  Syntax  DOUBLE  unitconversion:gTomg( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from grams into milligrams \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForGramToMilligramStream (inValue int); \nfrom UnitConversionForGramToMilligramStream \nselect unitconversion:gTomg(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The gram values from UnitConversionForGramToMilligramStream will be converted to milligrams and inserted in to the OutMediationStream", 
            "title": "gTomg (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#kgtolt-function", 
            "text": "Converts the input kilograms into imperial tons  Syntax  DOUBLE  unitconversion:kgToLT( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from kilograms into imperial tons \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForKilogramToImperialTonStream (inValue int); \nfrom UnitConversionForKilogramToImperialTonStream \nselect unitconversion:kgToLT(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The kilogram values from UnitConversionForKilogramToImperialTonStream will be converted to imperial tons and inserted in to the OutMediationStream", 
            "title": "kgToLT (Function"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#kgtost-function_1", 
            "text": "Converts the input kilograms into US tons  Syntax  DOUBLE  unitconversion:kgToST( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value needed to be converted from kilograms into US tons \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream UnitConversionForKilogramToUSTonStream (inValue int); \nfrom UnitConversionForKilogramToUSTonStream \nselect unitconversion:kgToST(inValue) as UnitConversionValue \ninsert into OutMediationStream;  The kilogram values from UnitConversionForKilogramToUSTonStream will be converted to US tons and inserted in to the OutMediationStream", 
            "title": "kgToST (Function"
        }, 
        {
            "location": "/license/", 
            "text": "Copyright (c) 2017 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}